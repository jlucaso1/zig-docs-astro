---
import Layout from "../../layouts/Layout.astro";
import ModuleNav from "../../components/ModuleNav.astro";
import * as DeclCategories from "../../lib/constants";
import { getDeclPath, getModuleSourcePath } from "../../lib/pathUtils";
import { getFieldData } from "../../lib/docParser";
import Link from "../../components/Link.astro";

// Generate all module pages at build time
export async function getStaticPaths() {
  // Ensure WASM is initialized
  // await initWasm(); // May not be needed depending on Astro setup

  const {
    getAllModules: getAllModulesInternal,
    getModuleData: getModuleDataInternal,
  } = await import("../../lib/docParser"); // Dynamic import if needed

  const modules = await getAllModulesInternal();

  // Use Promise.allSettled to handle potential errors for individual modules
  const results = await Promise.allSettled(
    modules.map(async (module) => {
      try {
        const moduleData = await getModuleDataInternal(module.name);
        return {
          params: { module: module.name },
          props: { moduleData: { ...moduleData, moduleName: module.name } }, // Keep moduleName here for convenience
        };
      } catch (error) {
        console.error(
          `Error fetching data for module ${module.name} in getStaticPaths:`,
          error
        );
        // Throw error to mark this path as failed if needed, or return null to skip
        throw new Error(`Failed to generate path for ${module.name}`);
        // return null; // Alternative: skip path on error
      }
    })
  );

  // Filter out rejected promises and extract fulfilled values
  const paths = results
    .filter((result) => result.status === "fulfilled")
    .map((result) => (result as PromiseFulfilledResult<any>).value);
  // .filter(p => p !== null); // Only needed if returning null on error

  console.log(`Successfully prepared ${paths.length} paths for module pages.`);
  return paths;
}

const { module } = Astro.params; // The module name from the URL
const { moduleData } = Astro.props; // Received from getStaticPaths

// --- Process declarations into categories ---
const typesList: any[] = [];
const namespacesList: any[] = [];
const errSetsList: any[] = [];
const fnsList: any[] = [];
const varsList: any[] = []; // Includes global vars and consts
const valsList: any[] = []; // Includes primitives
// Use constants from the imported module
moduleData.declarations.forEach((decl: { category: any; fqn: any }) => {
  switch (decl.category) {
    case DeclCategories.CAT_namespace:
      namespacesList.push(decl);
      break;
    case DeclCategories.CAT_container:
    case DeclCategories.CAT_type:
    case DeclCategories.CAT_type_type:
      typesList.push(decl);
      break;
    case DeclCategories.CAT_type_function:
      // Grouping with Types for now
      typesList.push(decl);
      break;
    case DeclCategories.CAT_global_variable:
    case DeclCategories.CAT_global_const:
      varsList.push(decl);
      break;
    case DeclCategories.CAT_function:
      fnsList.push(decl);
      break;
    case DeclCategories.CAT_error_set:
      errSetsList.push(decl);
      break;
    case DeclCategories.CAT_primitive:
      valsList.push(decl);
      break;
    case DeclCategories.CAT_alias:
      // Aliases should be resolved by processDeclarations, but handle defensively
      console.warn(
        `Unexpected unresolved alias found in module ${module}: ${decl.fqn}`
      );
      // Decide where to put unresolved aliases, maybe Types?
      // typesList.push(decl);
      break;
    default:
      console.warn(
        `Unknown category ${decl.category} for declaration ${decl.fqn} in module ${module}`
      );
    // Add to a generic list or ignore
  }
});

// Sort lists alphabetically by name
const sortByName = (a: { name: string }, b: { name: string }) =>
  a.name.localeCompare(b.name);
typesList.sort(sortByName);
namespacesList.sort(sortByName);
errSetsList.sort(sortByName);
fnsList.sort(sortByName);
varsList.sort(sortByName);
valsList.sort(sortByName);

// Fetch field data if the module itself has fields
let moduleFieldsHtml: any[] = [];
if (moduleData.fields?.length > 0) {
  moduleFieldsHtml = await Promise.all(
    moduleData.fields.map((fieldIndex: number) =>
      getFieldData(moduleData.rootDeclIndex, fieldIndex)
    )
  );
}

// Determine the source path for the module file itself using path util
const moduleSourceLink = getModuleSourcePath(module);
---

<Layout title={`${module} - Zig Documentation`}>
  <main>
    <ModuleNav currentPath={module} />

    <h1 id="hdrName" class="text-2xl font-normal pb-3 mb-2 border-0 border-dashed border-b">
      <span class="font-mono">{module}</span>
      <!-- <Link 
        href={moduleSourceLink} 
        target="_blank" 
        title="View source" 
        class="text-sm pl-4 font-sans font-normal text-gray-500 hover:text-black dark:text-gray-400 dark:hover:text-white no-underline"
      >[src]</Link> -->
    </h1>

    {
      moduleData.docs && (
        <div id="tldDocs" class="my-4 mb-8 leading-relaxed docs" set:html={moduleData.docs} />
      )
    }

    {
      typesList.length > 0 && (
        <section id="sectTypes" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Types</h2>
          <ul id="listTypes" class="columns-[20em] list-none m-0 p-0">
            {typesList.map((type) => (
              <li class="py-0.5 break-words">
                <Link href={getDeclPath(type.fqn)} class="font-mono">{type.name}</Link>
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      namespacesList.length > 0 && (
        <section id="sectNamespaces" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Namespaces</h2>
          <ul id="listNamespaces" class="columns-[20em] list-none m-0 p-0">
            {namespacesList.map((namespace) => (
              <li class="py-0.5 break-words">
                <Link href={getDeclPath(namespace.fqn)} class="font-mono">{namespace.name}</Link>
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      errSetsList.length > 0 && (
        <section id="sectErrSets" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Error Sets</h2>
          <ul id="listErrSets" class="columns-[20em] list-none m-0 p-0">
            {errSetsList.map((errSet) => (
              <li class="py-0.5 break-words">
                <Link href={getDeclPath(errSet.fqn)} class="font-mono">{errSet.name}</Link>
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      fnsList.length > 0 && (
        <section id="sectFns" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Functions</h2>
          <dl id="listFns">
            {fnsList.map((fn) => (
              <div class="p-2 mt-2 bg-gray-800 border border-gray-200 dark:border-gray-700 rounded">
                <dt class="flex gap-2 font-mono text-base mb-1">
                  {fn.protoHtmlShort && (
                    <Link href={getDeclPath(fn.fqn)}>
                      <code class="text-sm">{fn.protoHtmlShort.replace(fn.name, "")}</code>
                    </Link>
                  )}
                </dt>
                {fn.docsShort && (
                  <dd class="ml-4 text-sm text-gray-600 dark:text-gray-300" set:html={fn.docsShort} />
                )}
              </div>
            ))}
          </dl>
        </section>
      )
    }

    {
      varsList.length > 0 && (
        <section id="sectGlobalVars" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Global Variables & Constants</h2>
          <table class="w-full border-collapse mb-4 table-fixed">
            <tbody id="listGlobalVars">
              {varsList.map((variable) => (
                <tr>
                  <td class="text-left align-top p-2 border-b border-gray-200 dark:border-gray-700 break-words w-1/4 font-mono">
                    <Link href={getDeclPath(variable.fqn)}>
                      {variable.name}
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      )
    }

    {
      valsList.length > 0 && (
        <section id="sectValues" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Values</h2>
          <table class="w-full border-collapse mb-4 table-fixed">
            <tbody id="listValues">
              {valsList.map((value) => (
                <tr>
                  <td class="text-left align-top p-2 border-0 border-b border-gray-200 dark:border-gray-700 break-words w-1/4 font-mono">
                    {value.category === DeclCategories.CAT_primitive ? (
                      <span>{value.name}</span>
                    ) : (
                      <Link href={getDeclPath(value.fqn)}>{value.name}</Link>
                    )}
                  </td>
                  <td class="text-left align-top p-2 border-b border-gray-200 dark:border-gray-700 break-words w-3/10">
                    {value.typeHtml && <div set:html={value.typeHtml} />}
                  </td>
                  <td class="text-left align-top p-2 border-0 border-b border-gray-200 dark:border-gray-700 break-words w-9/20 text-sm text-gray-600 dark:text-gray-300" set:html={value.docsShort} />
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      )
    }

    {
      moduleFieldsHtml.length > 0 && (
        <section id="sectFields" class="mb-6">
          <h2 class="text-xl font-normal my-6 pb-1 border-0 border-b border-solid">Fields</h2>
          <div id="listFields">
            {moduleFieldsHtml.map((field) => (
              <div class="border-b border-0 border-gray-200 dark:border-gray-700 py-2 last:border-b-0 field-entry" set:html={field.html} />
            ))}
          </div>
        </section>
      )
    }
  </main>
</Layout>

<script>
  import { codeToHtml } from "../../lib/codeToHtml";

  const codesElements = document.getElementsByTagName("code");

  await Promise.all(
    Array.from(codesElements).map(async (codeElement) => {
      const codeOriginal = codeElement.innerHTML;
      codeElement.innerHTML = await codeToHtml(codeOriginal);
    })
  );
</script>
